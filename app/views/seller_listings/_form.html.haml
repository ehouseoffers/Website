:ruby
  # We have a bunch of css which hinges on this, so regardless of create or edit, make the form_id constant
  form_id = 'new_seller_listing'
  
= form_for @seller_listing, :html => {:id => form_id} do |f|
  = render :partial => 'shared/user_notice', :locals => {:model_obj => @seller_listing}

  = f.fields_for @seller_listing.user do |field|
    .field#first_name
      = field.label :first_name, 'First Name'
      = field.text_field :first_name, 'data-validation' => 'validate(required)', 'data-example' => 'First Name'

    .field#last_name
      = field.label :last_name, 'Last Name'
      = field.text_field :last_name, 'data-validation' => 'validate(required)', 'data-example' => 'Last Name'

    .field#email
      = field.label :email
      = field.text_field :email, 'data-validation' => 'validate(required, email)', 'data-example' => 'Email'

  = f.fields_for @seller_listing.user.phone_for_form do |field|
    .field#number
      = field.label :number, 'Phone'
      = field.text_field :number, 'data-validation' => 'validate(required)', 'data-example' => 'Phone Number'

  = f.fields_for @seller_listing.user.addresses.new do |field|
    .field#address1
      = field.label :address1, 'Address'
      = field.text_field :address1, 'data-validation' => 'validate(required)', 'data-example' => 'Address'

    #city_stateC.hidden
      .field#city
        = field.label :city, 'City'
        = field.text_field :city, 'data-validation' => 'validate(required)', 'data-example' => 'City'

      .field#state
        = field.label :state
        = field.text_field :state, 'data-validation' => 'validate(required, rangelength(2,2))', 'data-example' => 'State'


  = f.fields_for @seller_listing.user.addresses.new do |field|
    .field#address_zip
      = field.label :zip, 'Zip Code'
      = field.text_field :zip, 'data-validation' => 'validate(required, minlength(5))', 'data-example' => 'Zip Code'

  .submitC
    = image_submit_tag '/images/transparent.gif', :id => 'get_cash_offer_btn', :class => 'sprite'
    #securityC
      = image_tag '/images/transparent.gif', :id => 'lock_icon', :class => 'sprite', :alt => 'Secure!'
      %span security guaranteed
    #security_iconsC
      = image_tag '/images/transparent.gif', :id => 'mcafee', :class => 'sprite', :alt => 'McAfee'
      = image_tag '/images/transparent.gif', :id => 'truste', :class => 'sprite', :alt => 'Truste Certified Privacy'
      = image_tag '/images/transparent.gif', :id => 'verisign', :class => 'sprite last', :alt => 'Verisign'

:javascript
  $(document).ready(function() {
    // What a mess. clean this up!
    var city_stateC = $('div#city_stateC');
    var city = $('input#seller_listing_address_city', city_stateC);
    var state = $('input#seller_listing_address_state', city_stateC);
    var zip = $('input#seller_listing_address_zip');

    zip.blur(function(){
      // No need to proceed if there is no zip code
      if ( zip.val() == zip.attr('data-example') || $.blank(zip.val()) ) return;

      //if ( $.blank(city.val()) || $.blank(state.val()) ) {
        $.ajax({
          url     : "#{placefinder_by_zip_path}",
          data    : 'zip='+ zip.val(),
          dataType: 'json',
          type    : 'GET',
          success: function (data, status, xhr) {
            if ( $.blank(city.val()) ) city.val(data['city']).trigger('blur');
            if ( $.blank(state.val()) ) state.val(data['state']).trigger('blur');
            city_stateC.removeClass('hidden');
          },
          error: function (xhr, status, error) {
            zip.val(zip.attr('data-example')).removeClass('valid').addClass('invalid');
            $('div.form_validation_icon', $('div#address_zip')).removeClass('valid').addClass('invalid');

            $.Growl.show({
              message : xhr.responseText,
              icon    : 'error',
              timeout : 7500
            });
          }
        });
      //}
    });
  });

